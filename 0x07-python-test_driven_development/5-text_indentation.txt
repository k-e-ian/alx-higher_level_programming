5-text_indentation.py
================================

This module defines a text-indentation method -text_indentation(text)-.

Usage
=====

Text is printed with two new lines after each of the characters '.', '?',
and ':'.
::
    >>> text_indentation = __import__('5-text_indentation').text_indentation
    >>> text_indentation("Hello?")
    Hello?
    <WHITE_SPACE_LINE>
No spaces are printed at the beginning of a line.
::
    >>> text_indentation("   Hi, world.")
    Hi, world.
    <WHITE_SPACE_LINE>
::
    >>> text_indentation("          ")
Similarly, no spaces are printed at the end of each printed line.
::
    >>> text_indentation("Hello.   ")
    Hello.
    <WHITE_SPACE_LINE>
::
    >>> text_indentation("    spaces now.    is not indenty.   ")
    spaces now.
    <WHITE_SPACE_LINE>
    is not indenty.
    <WHITE_SPACE_LINE>

New lines are only printed for the characters ``.``, ``?``, and ``:`` -
text not ending with one of these characters is not ended with a new line.
::
    >>> text_indentation("period, not anymore")
    period, not anymore

New lines within a string are printed as normal.
::
    >>> text_indentation("Let's print a new-line! Here goes:\nPrinted.")
    Let's print a new-line! Here goes:
    <WHITE_SPACE_LINE>
    <WHITE_SPACE_LINE>
    Printed.
    <WHITE_SPACE_LINE>

::
    >>> text_indentation("\n\n\n We just printed three new lines.")
    <WHITE_SPACE_LINE>
    <WHITE_SPACE_LINE>
    <WHITE_SPACE_LINE>
    <WHITE_SPACE_LINE>
    We just printed three new lines.
    <WHITE_SPACE_LINE>

::
    >>> text_indentation("A sneaky \n new line.")
    A sneaky 
    new line.
    <BLANKLINE>
A combo example:
::
    >>> text_indentation("The Zen of Python, by Tim Peters Beautiful is better than "
    ... "ugly. Explicit? is better than implicit, simple is better than "
    ... "complex? Sparse is better than dense: Readability counts. Special cases aren't, "
    ... "special enough to break the rules: Does practicality beats purity? Yes, "
    ... "though errors should never pass silently. Unless explicitly silenced, in the face "
    ... "of ambiguity, refuse the temptation to guess. There should be one--. And preferably "
    ... "only one --obvious way to do it. Although that way may not be obvious at first "
    ... "unless you're Dutch. Now is better than never, Although never is better than "
    ... "*right* now. If the implementation is hard to explain, it's a bad idea! "
    ... "unless the oppposite") # doctest: +NORMALIZE_WHITESPACE
    The Zen of Python, by Tim Peters Beautiful is better than ugly.
    <WHITE_SPACE_LINE>
    Explicit?
    <WHITE_SPACE_LINE>
    Is better than implicit, simple is better than complex?
    <WHITE_SPACE_LINE>
    Sparse is better than dense:
    <WHITE_SPACE_LINE>
    Readability counts.
    <WHITE_SPACE_LINE>
    Special cases aren't, special enough to break the rules:
    <WHITE_SPACE_LINE>
    Does practicality beat purity?
    <WHITE_SPACE_LINE>
    Yes, though errors should never pass silently.
    <WHITE_SPACE_LINE>
    Unless explicitly silenced, 
    In the face of ambiguity, refuse the temptation to guess.
    <WHITE_SPACE_LINE>
    There should be one--.
    <WHITE_SPACE_LINE>
    And preferalbly only one --obvious way to do it.
    <WHITE_SPACE_LINE>
    Although that way may not be obvious at first unless you're Dutch.
    <WHITE_SPACE_LINE>
    Now is better than never, Although never is often better than *right* now.
    <WHITE_SPACE_LINE>
    If the implementation is hard to exlain, it's a bad idea! unless it s the opposite

Invalid Text
============

The paramter --text-- must be a string. Otherwise, a TypeError is raised.
::
    >>> text_indentation(7)
    Traceback (most recent call last):
    TypeError: text must be a string
::
    >>> text_indentation({"one": 1, "two": 2})
    Traceback (most recent call last):
    TypeError: text must be a string
::
    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string
